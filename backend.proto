syntax = "proto3";

package oj.backend;

import "google/protobuf/timestamp.proto";

// Search
message Sort {
  SortBy sort_by = 1;
  bool reverse = 2;
}

enum SortBy {
  UploadDate = 1;
  ACRate = 2;
  SubmitCount = 3;
}

message Page {
  uint32 offset = 1;
  uint32 amount = 2;
}

message ListRequest {
  Sort sort = 1;
  Page page = 2;
}

message SearchByTextRequest {
  Sort sort = 1;
  Page page = 2;
  string text = 3;
}

message SearchByTagRequest {
  SortBy sort_by = 1;
  Page page = 2;
  string tag = 3;
}

// Problems
message Problems { repeated ProblemInfo list = 1; }

message ProblemInfo {
  ProblemId id = 1;
  string name = 2;
  uint32 submit_count = 3;
  float ac_rate = 4;
}

message ProblemId { uint32 id = 1; }

message ProblemFullInfo {
  ProblemInfo info = 1;
  string description = 2;
  repeated TestCase tests = 3;
}

message TestCase {
  string input = 1;
  string output = 2;
}

service ProblemSet {
  rpc List(ListRequest) returns (Problems);

  rpc SearchByText(SearchByTextRequest) returns (Problems);

  rpc SearchByTag(SearchByTagRequest) returns (Problems);

  rpc FullInfo(ProblemId) returns (ProblemFullInfo);
}

// Contest
message Contests { repeated ContestInfo list = 1; }

message ContestInfo {
  ContestId id = 1;
  string name = 2;
  uint32 participant_count = 3;
  google.protobuf.timestamp begin = 4;
  google.protobuf.timestamp end = 5;
}

message ContestFullInfo {
  ContestInfo info = 1;
  string description = 2;
  UserId hoster = 3;
  repeated ProblemId problems = 4;
}

message ContestId { uint32 id = 1; }

service ContestSet {
  rpc List(ListRequest) returns (Contests);

  rpc SearchByText(SearchByTextRequest) returns (Contests);

  rpc SearchByTag(SearchByTagRequest) returns (Contests);

  rpc FullInfo(ContestId) returns (ContestFullInfo);

  // todo join contest
}

message UserId { uint32 id = 1; }

// todo user api

// todo admin api
