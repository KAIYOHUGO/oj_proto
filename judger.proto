syntax = "proto3";

package oj.judger;

import "google/protobuf/empty.proto";

message JudgeRequest {
  uint32 lang_id = 1;
  bytes code = 2;
  // memory limit in byte
  int32 memory = 3;
  // time limit in ms
  int32 time = 4;
  // len must > 0
  repeated TestCase tests = 5;
}

message TestCase {
  bytes input = 1;
  bytes output = 2;
}

message JudgeResponse {
  oneof state {
    // percentage 0 to 100
    int32 testing = 1;
    JudgeResult result = 2;
  }
}

message JudgeResult {
  JudgeResultState state = 1;
  // the longest time the code need to run the input
  float max_time = 2;
  bytes stderr = 3;
}

enum JudgeResultState {
  AC = 1;
  NA = 2;
  WA = 3;
  CE = 4;
  RE = 5;
  RF = 6;
  TLE = 7;
  MLE = 8;
  OLE = 9;
}

message Langs { repeated LangInfo list = 1; }

message LangInfo {
  uint32 lang_id = 1;
  string lang_name = 2;
  // compiler info or runtime info
  string info = 3;
  string lang_ext = 4;
}

message JudgerInfo {
  // memory limit of judger in Gb
  float memory = 1;
  Langs langs = 2;
  float cpu_factor = 3;
}

service Judger {
  // judge code
  rpc Judge(JudgeRequest) returns (stream JudgeResponse);

  rpc JudgerInfo(google.protobuf.Empty) returns (JudgerInfo);
}